#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../server/app");
const debug = require("debug");
const http = require("http");
const https = require("https");
const fs = require("fs");
const opn = require("opn");

let config = require("../config/web");
// import cooper from '../controls/api/project/cooper'

// console.log(cooper);
const options = {
  key: fs.readFileSync(__dirname + "/data/keys/server_gen.key"),
  cert: fs.readFileSync(__dirname + "/data/keys/server_gen.pem")
};

process.once("SIGTERM", function() {
  console.log("process", process.pid);
  // gracefulShutdown(function() {
  //   process.kill(process.pid, "SIGTERM");
  // });
});
/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(config.server.port || "3000");
app.set("port", port);

/**
 * Create HTTPS server.
 */
// var servers = https.createServer(options, app)
// servers.listen(443);
// servers.on('error', onErrors);
// servers.on('listening', onListenings);

/**
 * Event listener for HTTP server "error" event.
 */

function onErrors(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  let bind = "Port " + 443;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

// function onListenings() {
//   let addr = servers.address();
//   let bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//     debug.log('Listening on ' + bind);
// }

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  let bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  let uri = config.server.host + ":" + port;
  debug.log("Listening on " + bind);
  debug.log(uri);
  // if (process.env.NODE_ENV !== 'testing') {
  //     opn(uri)
  // }

  // cooper.start()
}
